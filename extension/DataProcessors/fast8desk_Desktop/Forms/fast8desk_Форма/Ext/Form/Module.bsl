// MIT License
//
// Copyright (c) 2023 FAST8.RU
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	fast8ЭтоВнешняяОбработка = СтрНачинаетсяС(Строка(ТипЗнч(РеквизитФормыВЗначение("Объект"))), "Внеш");
	
	Расширяемый_СоздатьЭлементыФормы();
	
	Элементы.Парковка.Видимость = Ложь;
	fast8ИмяПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "Наименование");
	fast8ПрочитатьНастройкиИНарисоватьВиджеты();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	fast8ЗаполнитьПоказателиНаКлиенте();
	Если fast8ПериодАвтообновления > 0 Тогда
		ПодключитьОбработчикОжидания("fast8ЗапуститьОбновлениеПоказателей", fast8ПериодАвтообновления, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если fast8ЗакрыватьТолькоПоКнопке = Истина И fast8ВыполняетсяЗакрытие = Ложь И ЗавершениеРаботы = Ложь Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура fast8ДекорацияРазмерОчередиСообщенийСДОНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ОчередьСообщенийВ1СДокументооборот.Форма.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияРазмерОчередиСообщенийСДОНажатие()

&НаКлиенте
Процедура fast8ДекорацияРегламентныеЗаданияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания");
	
КонецПроцедуры // fast8ДекорацияРегламентныеЗаданияНажатие()

&НаКлиенте
Процедура fast8ДекорацияЖурналРегистрацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации");
	
КонецПроцедуры // fast8ДекорацияЖурналРегистрацииНажатие()

&НаКлиенте
Процедура fast8ДекорацияАктивныеСеансыНажатие(Элемент)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.АктивныеПользователи");
	
КонецПроцедуры // fast8ДекорацияАктивныеСеансыНажатие()

&НаКлиенте
Процедура fast8ДекорацияОткрытьСписокОбменовНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиСинхронизацииДанных");
	
КонецПроцедуры // fast8ДекорацияОткрытьСписокОбменовНажатие()

&НаКлиенте
Процедура fast8ДекорацияРасширенияКонфигурацииНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.Расширения");
	
КонецПроцедуры // fast8ДекорацияРасширенияКонфигурацииНажатие()

&НаКлиенте
Процедура fast8ДекорацияПатчиНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.УстановленныеИсправления");
	
КонецПроцедуры // fast8ДекорацияПатчиНажатие()

&НаКлиенте
Процедура fast8ДекорацияКоличествоЗарегистрированныхВОбменеНажатие(Элемент)
	
	УзелИнформационнойБазы = fast8УзелОбменаСДО();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УзелОбмена", УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ЗапрещеноВыбиратьУзелОбмена", Истина);
	Если ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ОткрытьФорму("Обработка.РегистрацияИзмененийДляОбменаДанными.Форма", ПараметрыФормы,, УзелИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры // fast8ДекорацияКоличествоЗарегистрированныхВОбменеНажатие()

&НаКлиенте
Процедура fast8ДекорацияВнешниеОбработкиНажатие(Элемент)
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияВнешниеОбработкиНажатие()

&НаКлиенте
Процедура fast8ДекорацияВнешниеОтчетыНажатие(Элемент)
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияВнешниеОтчетыНажатие()

&НаКлиенте
Процедура fast8ДекорацияПоследнееОбновлениеРелизаНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.РезультатыОбновленияПрограммы");
	
КонецПроцедуры // fast8ДекорацияПоследнееОбновлениеРелизаНажатие()

&НаКлиенте
Процедура fast8ДекорацияПользователиНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияПользователиНажатие()

&НаКлиенте
Процедура fast8ДекорацияГруппыДоступаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.ГруппыДоступа.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияГруппыДоступаНажатие()

&НаКлиенте
Процедура fast8ДекорацияПрофилиГруппДоступаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.ПрофилиГруппДоступа.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияПрофилиГруппДоступаНажатие()

&НаКлиенте
Процедура fast8ДекорацияДатыЗапретаРедактированияНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаИзменения.Форма.ДатыЗапретаИзменения");
	
КонецПроцедуры // fast8ДекорацияДатыЗапретаРедактированияНажатие()

&НаКлиенте
Процедура fast8ДекорацияИзмененныеМакетыНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.МакетыПечатныхФорм");
	
КонецПроцедуры // fast8ДекорацияИзмененныеМакетыНажатие()

&НаКлиенте
Процедура fast8ДекорацияУдалениеПомеченныхНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма.ОсновнаяФорма");
	
КонецПроцедуры // fast8ДекорацияУдалениеПомеченныхНажатие()

&НаКлиенте
Процедура fast8ДекорацияГрупповоеИзменениеРеквизитовНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.Форма");
	
КонецПроцедуры // fast8ДекорацияГрупповоеИзменениеРеквизитовНажатие()

&НаКлиенте
Процедура fast8ДекорацияРегистрацияИзмененийВОбменеНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РегистрацияИзмененийДляОбменаДанными.Форма");
	
КонецПроцедуры // fast8ДекорацияРегистрацияИзмененийВОбменеНажатие()

&НаКлиенте
Процедура fast8ДекорацияЗаполнениеРегистровВзаиморасчетовНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ЗаполнениеРегистровВзаиморасчетов.Форма.Форма");
	
КонецПроцедуры // fast8ДекорацияЗаполнениеРегистровВзаиморасчетовНажатие()

&НаКлиенте
Процедура fast8ДекорацияКлючиРеестраДокументовНажатие(Элемент)
	
	ОткрытьФорму("Справочник.КлючиРеестраДокументов.Форма.ФормаСписка");
	
КонецПроцедуры // fast8ДекорацияКлючиРеестраДокументовНажатие()

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура fast8ОбновитьПоказатели(Команда)
	
	fast8ЗапуститьОбновлениеПоказателей();
	
КонецПроцедуры // fast8ОбновитьПоказатели()

&НаКлиенте
Процедура fast8ОткрытьНастройки(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("fast8ПеречитатьНастройки", ЭтотОбъект);
	Если fast8ЭтоВнешняяОбработка Тогда
		Префикс = "Внешняя";
	Иначе
		Префикс = "";
	КонецЕсли;
	
	ОткрытьФорму(СтрШаблон("%1Обработка.fast8desk_Desktop.Форма.fast8desk_Настройки", Префикс), Новый Структура("fast8ИмяПользователя", fast8ИмяПользователя), ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры // fast8ОткрытьНастройки()

&НаКлиенте
Процедура fast8СброситьНумерациюОбъектов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("fast8СброситьНумерациюОбъектовЗавершение", ЭтотОбъект), "Будут обновлены нумераторы в памяти кластера 1С. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // fast8СброситьНумерациюОбъектов()

&НаКлиенте
Процедура fast8УстановитьМонопольно(Команда)
	
	fast8УстановитьМонопольноНаСервере();
	
КонецПроцедуры // fast8УстановитьМонопольно()

&НаКлиенте
Процедура fast8Закрыть(Команда)
	
	fast8ВыполняетсяЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры // fast8Закрыть()

&НаКлиенте
Процедура fast8ПерезагрузитьПрограмму(Команда)
	
	Если fast8ЭтоВнешняяОбработка Тогда
		Префикс = "Внешняя";
	Иначе
		Префикс = "";
	КонецЕсли;
	
	ОткрытьФорму(СтрШаблон("%1Обработка.fast8desk_Desktop.Форма.fast8desk_ПараметрыПерезагрузки", Префикс),, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // fast8ПерезагрузитьПрограмму()

&НаКлиенте
Процедура fast8ОПрограмме(Команда)
	
	Если fast8ЭтоВнешняяОбработка Тогда
		Префикс = "Внешняя";
	Иначе
		Префикс = "";
	КонецЕсли;
	
	ОткрытьФорму(СтрШаблон("%1Обработка.fast8desk_Desktop.Форма.fast8desk_ОПрограмме", Префикс),,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // fast8ОПрограмме()

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция fast8УзелОбменаСДО()
	
	УзелОбменаСДО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнтеграцияС1СДокументооборотомПереопределяемый.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый КАК ИнтеграцияС1СДокументооборотомПереопределяемый
	|ГДЕ
	|	НЕ ИнтеграцияС1СДокументооборотомПереопределяемый.ЭтотУзел";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УзелОбменаСДО = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат УзелОбменаСДО;
	
КонецФункции // fast8УзелОбменаСДО()

&НаКлиенте
Процедура fast8ПеречитатьНастройки(Выбор, ДополнительныйПараметр) Экспорт
	
	Если Выбор = "fast8НастройкиИзменены" Тогда
		fast8ПрочитатьНастройкиИНарисоватьВиджеты();
	КонецЕсли;
	
КонецПроцедуры // fast8ПеречитатьНастройки()

&НаКлиенте
Процедура fast8ЗапуститьОбновлениеПоказателей()
	
	fast8ЗаполнитьПоказателиНаКлиенте();
	fast8ЗаполнитьПоказателиНаСервере();
	
КонецПроцедуры // fast8ЗапуститьОбновлениеПоказателей()

&НаСервере
Процедура fast8ПрочитатьНастройкиИНарисоватьВиджеты()
	
	fast8ПрочитатьНастройки();
	fast8ВывестиВиджеты();
	fast8ЗаполнитьПоказателиНаСервере();
	
КонецПроцедуры // fast8ПрочитатьНастройкиИНарисоватьВиджеты()

&НаКлиенте
Процедура fast8ЗаполнитьПоказателиНаКлиенте()
	
	#Область Виджет_Основное
	
	Если fast8ВиджетВключенКлиент("Виджет_Основное") Тогда
		ВидКлиента = "";
		#Если ТонкийКлиент Тогда
		ВидКлиента = "Тонкий клиент";
		#КонецЕсли
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ВидКлиента = "Толстый клиент";
		#КонецЕсли
		#Если ВебКлиент Тогда
		ВидКлиента = "Веб-клиент";
		#КонецЕсли
		
		СИ = Новый СистемнаяИнформация;
		fast8ПлатформаКлиент = СтрШаблон("%1 %2 %3", ВидКлиента, СИ.ВерсияПриложения, СИ.ТипПлатформы);
		fast8ПараметрыЗапуска = ПараметрЗапуска;
		#Если ТонкийКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		fast8КаталогПрограммыКлиент = КаталогПрограммы();
		#КонецЕсли
	КонецЕсли;
    	
	#КонецОбласти // Виджет_Основное

	Расширяемый_ЗаполнитьПоказателиНаКлиенте();
	
КонецПроцедуры // fast8ЗаполнитьПоказателиНаКлиенте()

&НаСервере
Процедура fast8ЗаполнитьПоказателиНаСервере()
	
	Сейчас = ТекущаяДатаСеанса();
	
	#Область Виджет_Основное
	
	Если fast8ВиджетВключенСервер("Виджет_Основное") Тогда
		fast8АдресБазы = СтрокаСоединенияИнформационнойБазы();
		fast8ВерсияКонфигурации = СтрШаблон("%1 %2", Метаданные.Версия, Метаданные.Синоним);
		fast8КаталогПрограммыСервер = КаталогПрограммы();
		СИ = Новый СистемнаяИнформация;
		fast8ПлатформаСервер = СтрШаблон("%1 %2", СИ.ВерсияПриложения, СИ.ТипПлатформы);
	КонецЕсли;
	
	#КонецОбласти // Виджет_Основное
	
	#Область Виджет_Сеансы
	
	Если fast8ВиджетВключенСервер("Виджет_Сеансы") Тогда
		ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
		fast8ТекущийСеанс = СтрШаблон("%1: %2 (%3) с %4", ТекущийСеанс.Пользователь, ТекущийСеанс.ИмяКомпьютера, ТекущийСеанс.IPАдресКлиента, ТекущийСеанс.НачалоСеанса);
		
		СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
		fast8АктивныеСеансы = СеансыИнформационнойБазы.Количество();
		
		fast8АктивныеПриложения.Очистить();
		ТаблицаПриложений = fast8АктивныеПриложения.Выгрузить();
		Элементы.fast8ОткрытКонфигуратор.Видимость = Ложь;
		Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
			Если Сеанс.ИмяПриложения = "Designer" Тогда
				Элементы.fast8ОткрытКонфигуратор.Видимость = Истина;
				fast8ОткрытКонфигуратор = СтрШаблон("%1: %2 (%3) с %4", Сеанс.Пользователь, Сеанс.ИмяКомпьютера, Сеанс.IPАдресКлиента, Сеанс.НачалоСеанса);
			КонецЕсли;
			НоваяСтрока = ТаблицаПриложений.Добавить();
			НоваяСтрока.Приложение = ПредставлениеПриложения(Сеанс.ИмяПриложения);
			НоваяСтрока.Количество = 1;
		КонецЦикла;
		ТаблицаПриложений.Свернуть("Приложение", "Количество");
		ТаблицаПриложений.Сортировать("Количество УБЫВ, Приложение");
		fast8АктивныеПриложения.Загрузить(ТаблицаПриложений);
		
		fast8ДублирующиесяСеансы.Очистить();
		ТаблицаСеансов = fast8ДублирующиесяСеансы.Выгрузить();
		Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
			Приложение = ПредставлениеПриложения(Сеанс.ИмяПриложения);
			Если СтрНайти(Приложение, "клиент") <> 0 Тогда
				НоваяСтрока = ТаблицаСеансов.Добавить();
				НоваяСтрока.Пользователь = Сеанс.Пользователь;
				НоваяСтрока.КоличествоСеансов = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСеансов.Свернуть("Пользователь", "КоличествоСеансов");
		ТаблицаСеансов.Сортировать("Пользователь");
		Для Каждого СтрокаТЧ Из ТаблицаСеансов Цикл
			Если СтрокаТЧ.КоличествоСеансов > 1 Тогда
				ЗаполнитьЗначенияСвойств(fast8ДублирующиесяСеансы.Добавить(), СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Элементы.ГруппаДублирующиесяСеансы.Заголовок = СтрШаблон("Дублирующиеся сеансы: %1", fast8ДублирующиесяСеансы.Количество());
	КонецЕсли;
	
	#КонецОбласти // Виджет_Сеансы
	
	#Область Виджет_ЖурналРегистрации
	
	Если fast8ВиджетВключенСервер("Виджет_ЖурналРегистрации") Тогда
		ЧасНазад = Сейчас - 3600;
		ТаблицаСобытий = Новый ТаблицаЗначений;
		ВыгрузитьЖурналРегистрации(ТаблицаСобытий, Новый Структура("Уровень, ДатаНачала, ДатаОкончания", УровеньЖурналаРегистрации.Ошибка, ЧасНазад, Сейчас), "Комментарий, ИмяПользователя");
		fast8КоличествоОшибокЗаПоследнийЧас = ТаблицаСобытий.Количество();
		
		fast8Ошибки.Очистить();
		ТаблицаСобытий.Колонки.Добавить("Количество");
		ТаблицаСобытий.ЗаполнитьЗначения(1, "Количество");
		ТаблицаСобытий.Свернуть("Комментарий, ИмяПользователя", "Количество");
		ТаблицаСобытий.Сортировать("Количество УБЫВ");
		КоличествоСтрок = Мин(5, ТаблицаСобытий.Количество());
		Для Н = 1 По КоличествоСтрок Цикл
			НоваяСтрока = fast8Ошибки.Добавить();
			СтрокаОшибки = ТаблицаСобытий.Получить(Н - 1);
			НоваяСтрока.Пользователь = СтрокаОшибки.ИмяПользователя;
			НоваяСтрока.Ошибка = СтрокаОшибки.Комментарий;
			НоваяСтрока.Количество = СтрокаОшибки.Количество;
		КонецЦикла;
		
		// Лезть в каталог кластера достаточно раз в час
		Если Не БезопасныйРежим() И (Не ЗначениеЗаполнено(fast8ВыполненЗапросКФайламКластера) Или Сейчас - fast8ВыполненЗапросКФайламКластера > 3600) Тогда
			fast8ВыполненЗапросКФайламКластера = Сейчас;
			
			ФайлКластера = Новый Файл(fast8КаталогКластера + "1CV8Clst.lst");
			Если ФайлКластера.Существует() Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ФайлКластера.ПолноеИмя);
				ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
				
				Позиция = СтрНайти(fast8АдресБазы, "Ref=");
				ИмяБазы = Сред(fast8АдресБазы, Позиция);
				ИмяБазы = СтрЗаменить(ИмяБазы, "Ref=""", "");
				ИмяБазы = СтрЗаменить(ИмяБазы, """;", "");
				
				Позиция = СтрНайти(ТекстФайла, ИмяБазы);
				ИмяКаталога = Сред(ТекстФайла, Позиция - 38, 36);
				КаталогПоиска = fast8КаталогКластера + ИмяКаталога + "\";
				
				ПроверкаКаталога = Новый Файл(КаталогПоиска);
				Если ПроверкаКаталога.Существует() Тогда
					ФайлыВКаталоге = НайтиФайлы(КаталогПоиска, "*", Истина);
					Для Каждого Файл Из ФайлыВКаталоге Цикл
						#Если Сервер И Не Сервер Тогда // DEBUG
							//@skip-check code-never-compilied
							Файл = Новый Файл;
						#КонецЕсли
						Если Файл.ЭтоКаталог() = Ложь Тогда
							РазмерМб = Цел(Файл.Размер() / 1024 / 1024);
						Иначе
							РазмерМб = 0;
						КонецЕсли;
						Если РазмерМб > 0 Тогда
							Подкаталог = СтрЗаменить(Файл.ПолноеИмя, КаталогПоиска, "");				
							Если СтрНачинаетсяС(Подкаталог, "1Cv8Log") Тогда
								fast8РазмерЖурналаРегистрации = fast8РазмерЖурналаРегистрации + РазмерМб;
							Иначе
								fast8РазмерСловарейИИндексовППИ = fast8РазмерСловарейИИндексовППИ + РазмерМб;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти // Виджет_ЖурналРегистрации
	
	#Область Виджет_ИнтеграцияСДО
	
	Если fast8ВиджетВключенСервер("Виджет_ИнтеграцияСДО") Тогда
		Если Метаданные.Константы.Найти("ИспользоватьИнтеграциюС1СДокументооборот") <> Неопределено Тогда
			fast8ИнтеграцияСДОВключена = Константы.ИспользоватьИнтеграциюС1СДокументооборот.Получить();
			fast8АдресБазыДО = Константы.АдресВебСервиса1СДокументооборот.Получить();
			fast8ИнтеграцияСДОНазваниеЭтойБазы = ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.ЭтотУзел();
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(1) КАК КоличествоСообщений,
			|	СУММА(ВЫБОР
			|			КОГДА ОчередьСообщенийВ1СДокументооборот.КоличествоПопытокОтправки = 0
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК КоличествоОшибок
			|ИЗ
			|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				fast8РазмерОчередиСообщенийСДО = Выборка.КоличествоСообщений;
				fast8КоличествоОшибокВОчередиОбменаСДО = Выборка.КоличествоОшибок;
			Иначе
				fast8РазмерОчередиСообщенийСДО = 0;
				fast8КоличествоОшибокВОчередиОбменаСДО = 0;
			КонецЕсли;
			
			fast8КоличествоЗарегистрированныхВОбмене = 0;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПравилаИнтеграцииС1СДокументооборотом.ТипОбъектаИС КАК ТипОбъектаИС
			|ИЗ
			|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграцииС1СДокументооборотом";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Фрагменты = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Фрагменты.Добавить(СтрШаблон("ВЫБРАТЬ 1 КАК Количество ИЗ %1.Изменения КАК Т ГДЕ Т.Узел ССЫЛКА ПланОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый ", Выборка.ТипОбъектаИС));
			КонецЦикла;
			Если Фрагменты.Количество() Тогда
				ВложенныйЗапрос = СтрСоединить(Фрагменты, " ОБЪЕДИНИТЬ ВСЕ ");
				Фрагменты = Новый Массив;
				Фрагменты.Добавить("ВЫБРАТЬ СУММА(Изменения.Количество) КАК Количество ИЗ (");
				Фрагменты.Добавить(ВложенныйЗапрос);
				Фрагменты.Добавить(") КАК Изменения");
				
				Запрос = Новый Запрос;
				Запрос.Текст = СтрСоединить(Фрагменты, "");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					fast8КоличествоЗарегистрированныхВОбмене = Выборка.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Сейчас = ТекущаяДатаСеанса();
			ТаблицаСобытий = Новый ТаблицаЗначений;
			ВыгрузитьЖурналРегистрации(ТаблицаСобытий, Новый Структура("Метаданные, ДатаНачала, ДатаОкончания", Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными, НачалоДня(Сейчас), Сейчас), "Дата, ПредставлениеСобытия");
			Если ТаблицаСобытий.Количество() Тогда
				ТаблицаСобытий.Сортировать("Дата УБЫВ");
				Для Каждого СтрокаТЧ Из ТаблицаСобытий Цикл
					Если СтрокаТЧ.ПредставлениеСобытия = "Фоновое задание. Успешное завершение" Тогда
						Длительность = Сейчас - СтрокаТЧ.Дата;
						fast8ОбменСДОПроизводился = fast8ПредставлениеВремениОкончанияОперации(Длительность, "%1 назад");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				fast8ОбменСДОПроизводился = "Сегодня не производился";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти // Виджет_ИнтеграцияСДО
	
	#Область Виджет_Обмены
	
	Если fast8ВиджетВключенСервер("Виджет_Обмены") Тогда
		ПланыОбменаБСП = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
		ТаблицаМонитора = ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ПланыОбменаБСП);
		fast8Обмены.Очистить();
		Для Каждого СтрокаТЧ Из ТаблицаМонитора Цикл
			НоваяСтрока = fast8Обмены.Добавить();
			ЗавершенОбмен = ТекущаяДатаСеанса() - Мин(СтрокаТЧ.ДатаОкончанияПоследнейУспешнойЗагрузки, СтрокаТЧ.ДатаОкончанияПоследнейУспешнойВыгрузки);
			ПредставлениеВремени = fast8ПредставлениеВремениОкончанияОперации(ЗавершенОбмен, "%1 назад");
			НоваяСтрока.Обмен = СтрокаТЧ.УзелИнформационнойБазы;
			НоваяСтрока.ВремяОбмена = ПредставлениеВремени;
			НоваяСтрока.Статус = ?(СтрокаТЧ.РезультатПоследнейВыгрузкиДанных = 1 Или СтрокаТЧ.РезультатПоследнейЗагрузкиДанных = 1, 6, 1);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти // Виджет_Обмены
	
	#Область Виджет_РегламентныеЗадания
	
	Если fast8ВиджетВключенСервер("Виджет_РегламентныеЗадания") Тогда
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно));
		fast8АктивныеФоновыеЗадания.Очистить();
		Для Каждого Задание Из АктивныеЗадания Цикл
			НоваяСтрока = fast8АктивныеФоновыеЗадания.Добавить();
			НоваяСтрока.Задание = Задание.Наименование;
			ВыполняетсяЗадание = ТекущаяДатаСеанса() - Задание.Начало;
			ПредставлениеВремени = fast8ПредставлениеВремениОкончанияОперации(ВыполняетсяЗадание, "уже %1", 1);
			НоваяСтрока.Выполняется = ПредставлениеВремени;
			НоваяСтрока.Длительность = ВыполняетсяЗадание;
		КонецЦикла;
		fast8АктивныеФоновыеЗадания.Сортировать("Длительность УБЫВ");
		Элементы.fast8ДекорацияРаботаСоВнешнимиРесурсамиЗаблокирована.Видимость = РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
	КонецЕсли;
	
	#КонецОбласти // Виджет_РегламентныеЗадания
	
	#Область Виджет_Расширения
	
	Если fast8ВиджетВключенСервер("Виджет_Расширения") Тогда
		Расширения = РасширенияКонфигурации.Получить();
		Если Не ЗначениеЗаполнено(fast8ВыполненЗапросКДаннымРасширений) Или Сейчас - fast8ВыполненЗапросКДаннымРасширений > 3600 Тогда
			fast8ВыполненЗапросКДаннымРасширений = Сейчас;
			fast8ДанныеРасширений.Очистить();
			
			Для Каждого Расширение Из Расширения Цикл
				Если СтрНачинаетсяС(Расширение.Имя, "EF_") Тогда
				Иначе
					СтруктураКонфигурации = Новый ОбъектМетаданныхКонфигурация(Расширение.ПолучитьДанные());
					НоваяСтрока = fast8ДанныеРасширений.Добавить();
					НоваяСтрока.Имя = Расширение.Имя;
					НоваяСтрока.РежимСовместимости = СтрЗаменить(СтруктураКонфигурации.РежимСовместимостиРасширенияКонфигурации, "Версия", "");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		fast8ПатчиКонфигурацииКоличество = 0;
		fast8РасширенияКонфигурацииКоличество = 0;
		fast8РасширенияКонфигурации.Очистить();
		Для Каждого Расширение Из Расширения Цикл
			Если СтрНачинаетсяС(Расширение.Имя, "EF_") Тогда
				fast8ПатчиКонфигурацииКоличество = fast8ПатчиКонфигурацииКоличество + 1;
				НоваяСтрока = fast8ПатчиКонфигурации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Расширение);
			Иначе
				fast8РасширенияКонфигурацииКоличество = fast8РасширенияКонфигурацииКоличество + 1;
				НоваяСтрока = fast8РасширенияКонфигурации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Расширение);
				НоваяСтрока.КонтрольнаяСумма = Base64Строка(Расширение.ХешСумма);
				НоваяСтрока.Структурное = Расширение.ИзменяетСтруктуруДанных();
				НоваяСтрока.ЗащитаОтОпасныхДействий = Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
				НоваяСтрока.Версия = Расширение.Версия;
				СтрокиДанных = fast8ДанныеРасширений.НайтиСтроки(Новый Структура("Имя", НоваяСтрока.Имя));
				НоваяСтрока.РежимСовместимости = СтрокиДанных.Получить(0).РежимСовместимости;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДополнительныеОтчетыИОбработки.Вид В (ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет), ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет))
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК fast8ВнешниеОтчеты,
		|	СУММА(ВЫБОР
		|			КОГДА ДополнительныеОтчетыИОбработки.Вид В (ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет), ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет))
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК fast8ВнешниеОбработки
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			fast8ВнешниеОбработки = Выборка.fast8ВнешниеОбработки;
			fast8ВнешниеОтчеты = Выборка.fast8ВнешниеОтчеты;
		Иначе
			fast8ВнешниеОбработки = 0;
			fast8ВнешниеОтчеты = 0;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(1) КАК fast8ИзмененныеМакеты
		|ИЗ
		|	РегистрСведений.ПользовательскиеМакетыПечати КАК ИзмененныеМакеты";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			fast8ИзмененныеМакеты = Выборка.fast8ИзмененныеМакеты;
		Иначе
			fast8ИзмененныеМакеты = 0;
		КонецЕсли;
		
	КонецЕсли;

	#КонецОбласти // Виджет_Расширения
	
	#Область Виджет_Обновление
	
	Если fast8ВиджетВключенСервер("Виджет_Обновление") Тогда
		fast8ВерсияРелизаКонфигурации = СтрШаблон("%1 %2", Метаданные.Версия, Метаданные.Синоним);
		fast8РежимСовместимости = СтрЗаменить(Метаданные.РежимСовместимости, "Версия", "");
		СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
		fast8ПоследнееОбновлениеРелиза = СведенияОбОбновлении.ВремяОкончанияОбновления;
		
		Сейчас = ТекущаяДатаСеанса();
		ТаблицаСобытий = Новый ТаблицаЗначений;
		События = Новый Массив;
		События.Добавить("_$InfoBase$_.DBConfigExtensionUpdate");
		События.Добавить("_$InfoBase$_.DBConfigUpdate");
		ВыгрузитьЖурналРегистрации(ТаблицаСобытий, Новый Структура("Событие, ДатаНачала, ДатаОкончания", События, НачалоДня(Сейчас), Сейчас), "Дата, ПредставлениеСобытия, Данные, ИмяПользователя");
		fast8КоличествоИзмененийКонфигурацииСегодня = ТаблицаСобытий.Количество();
		fast8ИзмененияКонфигурацииСегодня.Очистить();
		Для Каждого СтрокаТЧ Из ТаблицаСобытий Цикл
			НоваяСтрока = fast8ИзмененияКонфигурацииСегодня.Добавить();
			НоваяСтрока.Дата = СтрокаТЧ.Дата;
			НоваяСтрока.ИмяПользователя = СтрокаТЧ.ИмяПользователя;
			НоваяСтрока.Событие = СтрЗаменить(СтрокаТЧ.ПредставлениеСобытия, "Информационная база. ", "");
			Если ТипЗнч(СтрокаТЧ.Данные) = Тип("Структура") Тогда
				СтрокаТЧ.Данные.Свойство("Имя", НоваяСтрока.Данные);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаВерсииПодсистем.Заголовок = СтрШаблон("Версия БСП %1", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяПодсистемы";
		fast8ВерсииПодсистем.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	#КонецОбласти // Виджет_Обновление
	
	#Область Виджет_Пользователи
	
	Если fast8ВиджетВключенСервер("Виджет_Пользователи") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(РасчетКоличества.fast8Пользователи) КАК fast8Пользователи,
		|	СУММА(РасчетКоличества.fast8ГруппыДоступа) КАК fast8ГруппыДоступа,
		|	СУММА(РасчетКоличества.fast8ПрофилиГруппДоступа) КАК fast8ПрофилиГруппДоступа
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК fast8Пользователи,
		|		0 КАК fast8ГруппыДоступа,
		|		0 КАК fast8ПрофилиГруппДоступа
		|	ИЗ
		|		Справочник.Пользователи КАК Пользователи
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		1,
		|		0
		|	ИЗ
		|		Справочник.ГруппыДоступа КАК ГруппыДоступа
		|	ГДЕ
		|		НЕ ГруппыДоступа.ЭтоГруппа
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		1
		|	ИЗ
		|		Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|	ГДЕ
		|		НЕ ПрофилиГруппДоступа.ЭтоГруппа) КАК РасчетКоличества";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			fast8Пользователи = Выборка.fast8Пользователи;
			fast8ГруппыДоступа = Выборка.fast8ГруппыДоступа;
			fast8ПрофилиГруппДоступа = Выборка.fast8ПрофилиГруппДоступа;
		Иначе
			fast8Пользователи = 0;
			fast8ГруппыДоступа = 0;
			fast8ПрофилиГруппДоступа = 0;
		КонецЕсли;
		
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		fast8ПользователиИБ = ПользователиИБ.Количество();
		fast8ПользователиСПолнымиПравами = 0;
		Для Каждого Пользователь Из ПользователиИБ Цикл
			Если ПравоДоступа("Администрирование", Метаданные, Пользователь) Тогда
				fast8ПользователиСПолнымиПравами = fast8ПользователиСПолнымиПравами + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти // Виджет_Пользователи
	
	#Область Виджет_УниверсальныеКоманды
	
	Если fast8ВиджетВключенСервер("Виджет_УниверсальныеКоманды") Тогда
		fast8ПроверитьМонопольно();
	КонецЕсли;
	
	#КонецОбласти // Виджет_УниверсальныеКоманды
	
	Расширяемый_ЗаполнитьПоказателиНаСервере();
		
КонецПроцедуры // fast8ЗаполнитьПоказателиНаСервере()

&НаСервере
Функция fast8ПредставлениеВремениОкончанияОперации(Длительность, ШаблонПредставления, Падеж = 0)
	
	Если Длительность < 60 Тогда
		ПредставлениеВремени = "только что";
	Иначе
		Если Длительность < 3600 Тогда
			Времени = Цел(Длительность / 60);
			Единица = "минута";
		ИначеЕсли Длительность < 86400 Тогда
			Времени = Цел(Длительность / 3600);
			Единица = "час";
		Иначе
			Времени = Цел(Длительность / 86400);
			Единица = "день";
		КонецЕсли;
		Склонение = ПолучитьСклоненияСтрокиПоЧислу(Единица, Времени,, "ЧС=Количественное", ?(Падеж = 1, "ПД=Винительный", "ПД=Именительный"));
		ПредставлениеВремени = СтрШаблон(ШаблонПредставления, Склонение.Получить(0));
	КонецЕсли;
	
	Возврат ПредставлениеВремени;
	
КонецФункции // fast8ПредставлениеВремениОкончанияОперации()

&НаСервере
Функция fast8ВиджетВключенСервер(Виджет)
	
	Поиск = fast8ПорядокВиджетов.НайтиСтроки(Новый Структура("Виджет", Виджет));
	Возврат Поиск.Получить(0).Используется;
	
КонецФункции // fast8ВиджетВключенСервер()

&НаКлиенте
Функция fast8ВиджетВключенКлиент(Виджет)
	
	Поиск = fast8ПорядокВиджетов.НайтиСтроки(Новый Структура("Виджет", Виджет));
	Возврат Поиск.Получить(0).Используется;
	
КонецФункции // fast8ВиджетВключенКлиент()

&НаСервере
Процедура fast8ПрочитатьНастройки()
	
	ПутьККаталогуКластера = ХранилищеОбщихНастроек.Загрузить("fast8КаталогКластера", "fast8Desktop");
	Если ПутьККаталогуКластера = Неопределено Тогда
		fast8КаталогКластера = "C:\Program Files\1cv8\srvinfo\reg_1541\";
		ХранилищеОбщихНастроек.Сохранить("fast8КаталогКластера", "fast8Desktop", fast8КаталогКластера);
	Иначе
		fast8КаталогКластера = ПутьККаталогуКластера;
	КонецЕсли;
	
	fast8ЕстьНастройка = ХранилищеОбщихНастроек.Загрузить("fast8ЕстьНастройка", "fast8Desktop",, fast8ИмяПользователя);
	Если fast8ЕстьНастройка = Неопределено Тогда
		fast8ЗаполнитьНастройкиПоУмолчанию();
	КонецЕсли;
	
	Реквизиты = fast8СписокСохраняемыхРеквизитов();
	Для Каждого Реквизит Из Реквизиты Цикл
		ЭтотОбъект[Реквизит] = ХранилищеОбщихНастроек.Загрузить(Реквизит, "fast8Desktop",, fast8ИмяПользователя);
	КонецЦикла;
	fast8ПорядокВиджетов.Загрузить(ХранилищеОбщихНастроек.Загрузить("fast8ПорядокВиджетов", "fast8Desktop",, fast8ИмяПользователя));
	
	ТребуетсяОбновитьСписокВиджетов = Ложь;
	Виджеты = fast8СписокВиджетов();
	Для Каждого Виджет Из Виджеты Цикл
		Поиск = fast8ПорядокВиджетов.НайтиСтроки(Новый Структура("Виджет", Виджет));
		Если Не Поиск.Количество() Тогда
			НоваяСтрока = fast8ПорядокВиджетов.Добавить();
			НоваяСтрока.Виджет = Виджет;
			НоваяСтрока.Используется = Истина;
			ТребуетсяОбновитьСписокВиджетов = Истина;
		КонецЕсли;
	КонецЦикла;
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаТЧ Из fast8ПорядокВиджетов Цикл
		Если Виджеты.Найти(СтрокаТЧ.Виджет) = Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаТЧ);
			ТребуетсяОбновитьСписокВиджетов = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		fast8ПорядокВиджетов.Удалить(СтрокаУдалить);
	КонецЦикла;
	Если ТребуетсяОбновитьСписокВиджетов Тогда
		ХранилищеОбщихНастроек.Сохранить("fast8ПорядокВиджетов", "fast8Desktop", fast8ПорядокВиджетов.Выгрузить(),, fast8ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры // fast8ПрочитатьНастройки()

&НаСервере
Процедура fast8ЗаполнитьНастройкиПоУмолчанию()
	
	fast8ВысотаВиджета = 15;
	fast8ЗапускатьАвтоматически = Ложь;
	fast8КоличествоВиджетовПоВертикали = 4;
	fast8КоличествоВиджетовПоГоризонтали = 3;
	fast8ПериодАвтообновления = 60;
	fast8ШиринаВиджета = 60;
	
	ХранилищеОбщихНастроек.Сохранить("fast8ЕстьНастройка", "fast8Desktop", Истина,, fast8ИмяПользователя);
	Реквизиты = fast8СписокСохраняемыхРеквизитов();
	Для Каждого Реквизит Из Реквизиты Цикл
		ХранилищеОбщихНастроек.Сохранить(Реквизит, "fast8Desktop", ЭтотОбъект[Реквизит],, fast8ИмяПользователя);
	КонецЦикла;
	
	Виджеты = fast8СписокВиджетов();
	Для Каждого Виджет Из Виджеты Цикл
		НоваяСтрока = fast8ПорядокВиджетов.Добавить();
		НоваяСтрока.Виджет = Виджет;
		НоваяСтрока.Используется = Истина;
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить("fast8ПорядокВиджетов", "fast8Desktop", fast8ПорядокВиджетов.Выгрузить(),, fast8ИмяПользователя);
	
КонецПроцедуры // fast8ЗаполнитьНастройкиПоУмолчанию()

&НаСервере
Функция fast8СписокВиджетов()
	
	Виджеты = Новый Массив;
	Виджеты.Добавить("Виджет_Основное");
	Виджеты.Добавить("Виджет_Сеансы");
	Виджеты.Добавить("Виджет_ЖурналРегистрации");
	Виджеты.Добавить("Виджет_ИнтеграцияСДО");
	Виджеты.Добавить("Виджет_Обмены");
	Виджеты.Добавить("Виджет_РегламентныеЗадания");
	Виджеты.Добавить("Виджет_Расширения");
	Виджеты.Добавить("Виджет_Обновление");
	Виджеты.Добавить("Виджет_Пользователи");
	Виджеты.Добавить("Виджет_УниверсальныеКоманды");
	
	Расширяемый_СписокВиджетов(Виджеты);
	
	Возврат Виджеты;
	
КонецФункции // fast8СписокВиджетов()

&НаСервере
Функция fast8СписокСохраняемыхРеквизитов()
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("fast8ВысотаВиджета");
	Реквизиты.Добавить("fast8ЗапускатьАвтоматически");
	Реквизиты.Добавить("fast8КоличествоВиджетовПоВертикали");
	Реквизиты.Добавить("fast8КоличествоВиджетовПоГоризонтали");
	Реквизиты.Добавить("fast8ПериодАвтообновления");
	Реквизиты.Добавить("fast8ШиринаВиджета");
	Реквизиты.Добавить("fast8ЗакрыватьТолькоПоКнопке");
	
	Возврат Реквизиты;
	
КонецФункции // fast8СписокСохраняемыхРеквизитов()

&НаСервере
Процедура fast8ВывестиВиджеты()
	
	ТекущаяКолонка = 0;
	КоличествоВиджетовВКолонке = 0;
	
	Для Каждого СтрокаТЧ Из fast8ПорядокВиджетов Цикл
		Элементы[СтрокаТЧ.Виджет].Видимость = СтрокаТЧ.Используется;
		Элементы[СтрокаТЧ.Виджет].Высота = fast8ВысотаВиджета;
		Элементы[СтрокаТЧ.Виджет].Ширина = fast8ШиринаВиджета;
		
		ТекущаяКолонка = ТекущаяКолонка + 1;
		Если ТекущаяКолонка > 5 Или ТекущаяКолонка > fast8КоличествоВиджетовПоГоризонтали Тогда
			ТекущаяКолонка = 1;
			КоличествоВиджетовВКолонке = КоличествоВиджетовВКолонке + 1;
		КонецЕсли;
		
		Если ТекущаяКолонка > 5 Или ТекущаяКолонка > fast8КоличествоВиджетовПоГоризонтали Тогда
			Элементы.Переместить(Элементы[СтрокаТЧ.Виджет], Элементы.Парковка);
			Элементы[СтрокаТЧ.Виджет].Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		Элементы.Переместить(Элементы[СтрокаТЧ.Виджет], Элементы["ГруппаКолонка" + ТекущаяКолонка]);
	КонецЦикла;
	
КонецПроцедуры // fast8ВывестиВиджеты()

&НаКлиенте
Процедура fast8СброситьНумерациюОбъектовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		fast8СброситьНумерациюОбъектовНаСервере();
		ПоказатьОповещениеПользователя("Обновлены нумераторы в памяти кластера 1С",, "Обновлены нумераторы в памяти кластера 1С", БиблиотекаКартинок.Информация32);
	КонецЕсли;

КонецПроцедуры // fast8СброситьНумерациюОбъектовЗавершение()

&НаСервере
Процедура fast8СброситьНумерациюОбъектовНаСервере()
	
	ОбновитьНумерациюОбъектов();
	
КонецПроцедуры // fast8СброситьНумерациюОбъектовНаСервере()

&НаСервере
Процедура fast8УстановитьМонопольноНаСервере()
	
	Попытка
		УстановитьМонопольныйРежим(Не fast8Монопольно);
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Не удалось установить монопольно по причине %1", ОписаниеОшибки());
		Сообщение.Сообщить();
	КонецПопытки;
	
	fast8ПроверитьМонопольно();
	
КонецПроцедуры // fast8УстановитьМонопольноНаСервере()

&НаСервере
Процедура fast8ПроверитьМонопольно()
	
	fast8Монопольно	= МонопольныйРежим();
	fast8РежимРаботы = ?(fast8Монопольно, "монопольный", "конкурентный");
	Элементы.fast8УстановитьМонопольно.Заголовок = СтрШаблон("Режим работы: %1. %2", fast8РежимРаботы, ?(fast8Монопольно, "Отключить монопольно", "Включить монопольно"));
	
КонецПроцедуры // fast8ПроверитьМонопольно()

#КонецОбласти // СлужебныеПроцедурыИФункции

//@skip-check module-structure-top-region
#Область РасширениеФункциональности

&НаСервере
Процедура Расширяемый_СоздатьЭлементыФормы()
	
	//Виджет = Элементы.Добавить("Виджет_Имя", Тип("ГруппаФормы"), Элементы.Парковка);
	//Виджет.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//Виджет.Заголовок = "Виджет_Имя";
	//Виджет.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	//Виджет.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	//Виджет.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	//Виджет.ЦветФона = WebЦвета.Кремовый;
	//
	//ДобавляемыеРеквизиты = Новый Массив;
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Показатель1", Новый ОписаниеТипов("Строка"),, "Показатель 1"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Показатель2", Новый ОписаниеТипов("Строка"),, "Показатель 2"));
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты, );
	//
	//НовыйЭлемент = Элементы.Добавить("Показатель1", Тип("ПолеФормы"), Виджет);
	//НовыйЭлемент.ПутьКДанным = "Показатель1";
	//НовыйЭлемент = Элементы.Добавить("Показатель2", Тип("ПолеФормы"), Виджет);
	//НовыйЭлемент.ПутьКДанным = "Показатель2";
	
КонецПроцедуры // Расширяемый_СоздатьЭлементыФормы()

&НаСервере
Процедура Расширяемый_СписокВиджетов(Виджеты)
	
	//Виджеты.Добавить("Виджет_Имя");
	
КонецПроцедуры // Расширяемый_СписокВиджетов()

&НаКлиенте
Процедура Расширяемый_ЗаполнитьПоказателиНаКлиенте()
	
	//Если fast8ВиджетВключенКлиент("Виджет_Имя") Тогда
	//	ЭтаФорма.Показатель1 = "ТестКлиент";
	//КонецЕсли;
	
КонецПроцедуры // Расширяемый_ЗаполнитьПоказателиНаКлиенте()

&НаСервере
Процедура Расширяемый_ЗаполнитьПоказателиНаСервере()
	
	//Если fast8ВиджетВключенСервер("Виджет_Имя") Тогда
	//	ЭтаФорма.Показатель2 = "ТестСервер";
	//КонецЕсли;
	
КонецПроцедуры // Расширяемый_ЗаполнитьПоказателиНаСервере()

#КонецОбласти // РасширениеФункциональности